API_ID = 26797338
API_HASH = "a2ae45636ba5034a1b97d0eba3fc88c1"

async def process_archive(archive_path: Path, session_folder: Path, temp_folder: Path):
    print(f"Processing archive {archive_path.name}...")

    # Очистить временную папку
    if temp_folder.exists():
        try: shutil.rmtree(temp_folder)
        except: pass
    try: temp_folder.mkdir()
    except: pass

    # Распаковать архив в temp_folder
    if archive_path.suffix == ".zip":
        with zipfile.ZipFile(archive_path, 'r') as zip_ref:
            zip_ref.extractall(temp_folder)
    else:
        print(f"Unsupported archive format: {archive_path.suffix}")
        return

    # Ожидаем, что внутри temp_folder есть папка tdata/
    tdata_path = temp_folder / "tdata"
    if not tdata_path.exists():
        print(f"tdata folder not found inside {archive_path.name}")
        return

    # Загружаем tdata
    tdesk = TDesktop(str(tdata_path))
    if not tdesk.isLoaded():
        print(f"Failed to load tdata from {archive_path.name}")
        return

    # Создаём API с нужными параметрами
    my_api = APIData(
        api_id=API_ID,
        api_hash=API_HASH,
        device_model="Desktop"
    )

    session_file = session_folder / f"{archive_path.stem}.session"

    client = await tdesk.ToTelethon(
        session=str(session_file),
        flag=CreateNewSession,
        api=my_api,
        proxy=proxy
    )

    await client.connect()
    print(f"Connected: {archive_path.name}")
    await client.disconnect()
        # Очистка временной папки
    try: shutil.rmtree(temp_folder)
    except: pass


async def main():
    base_dir = Path(__file__).parent
    tdata_archives_dir = base_dir / "tdata"    # здесь лежат архивы с tdata
    session_dir = base_dir / "sessions"
    session_dir.mkdir(exist_ok=True)

    temp_dir = base_dir / "temp_unpack"
    
    tasks = []
    for archive_file in tdata_archives_dir.iterdir():
        if archive_file.is_file() and archive_file.suffix == ".zip":
            try:
                await process_archive(archive_file, session_dir, temp_dir)
            except Exception as e:
                print(f'Error: {archive_file.name}. {e}')

    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())
